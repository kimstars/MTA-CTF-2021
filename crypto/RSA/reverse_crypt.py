from Crypto.Util.number import bytes_to_long, getPrime, isPrime
from flag import FLAG

def complement(x):
    mask = (1 << x.bit_length()) - 1
    return ~x & mask
if __name__ == '__main__':
    # this may take some time
    while True:
        p = getPrime(1024)
        not_p = complement(p)+1
        if isPrime(not_p):
            break
    
    while True:
        q = getPrime(1024)
        not_q = complement(q)+1
        if isPrime(not_q) and q != p:
            break
    n = p * q
    n1 = p* not_q
    n2 = q* not_p
    e = 65537
    c1 = pow(bytes_to_long(FLAG.encode()), e, n1)
    c2 = pow(bytes_to_long(FLAG.encode()), e, n2)

    print("n =", n)
    print("n1 =", n1)
    print("n2 =", n2)
    print("e =", e)
    print("c1 =", c1)
    print("c2 =", c2)


#n = 18352065941953256638271638108087312374332644574530821277352793129503291716011835084621110359396996797866842036344443722185956129783548687838857584056848402997204658422542885452790304147216449448270303172937694457142553707456811218636798583059759028498517433825220449758087160724551294547248714284933717409642835055997921004544705197979630094986110226557307270538724369760539388748592991531092796716083093728009342340906437664362907665395762424618908377395978993216277943001656984924080746441626373377866458307424243921088734850698144875159419223392178081992486688019611360327184991947286609131212481348973860570691183
#n1 = 1311198109222470502757484189847757987126310769430850197865687528243259293969975828898050030748618620667088080656927897410303198064844300342814131928120861179458917357579779415011173520248015963307973156546351078316127652632278293497788287685996634625067114942474692377384542755775928769637331169892563746206003451900167879597517119806088448598905033281728994133778569216837511330486113420311443637005171849785450858271744222829014825759040621670913375431176064404287888334666081395268664205328441194468822449931548212928105627257883056907606211037235396241267303185625741071263563169129554526862136715950840833477009
#n2 = 11809957256415024723729513483707953631210472909949876421923768928864714790531149654518265113460128436234957842373727757466035496295573071485029347301467280424990797207311050054165993072878506671944898913133222243868951083188494649489545604499504727679823167450231455399858446423997239232180197263556106772680826314578422989894315637127377511334504508136568646977751470292995905519630992834637717845762613950850098279161305896926881594510038730932490520932180613601253717108827457137881209083058410642369593048399678623767134889404007362498693044132787808199966438022999767971512298263652694353092017218637078425078161
#e = 65537
#c1 = 827889119164577101920461024052357155836165735840853399756672718616445408838316441585069144143019800841367158585852864332588525186493385702135322523870747492455036475604425422209777340220734331089058295369409535412784762946874829160982702987993976900766906595941037906786942102416629720948103927328723651241033431707911799672318051544916527595369942973983189160634444978207036402150601493685886644543225937776565223376195221488256556076077577346485939694328660652400183604417800207702122689580669812858355922389599930837509898394282274371464839111859318733677844550202381787677113011798038299532073859645706625869811
#c2 = 7510708326142237454222762635474116339487215449299077289116976428660714812659879424631396660922027399040934589656201014859500855305947437218746050286402578098449524374581776619866946467804381806620746094361322557167157859280632630815750241309823243268229134853680323006825886251636441138495356939721812849304954759258768871699027049227178312501054205045837139056522871557304410931000406479425344833220438747785404496319676076177011524148702918261090451168998377798443721891024209667783742502173787320083103075056363429694971016621442022819782750007447878478717535675915773022499745966772477795851228312299200597063931
